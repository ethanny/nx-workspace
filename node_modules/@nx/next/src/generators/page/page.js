"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pageGenerator = pageGenerator;
const react_1 = require("@nx/react");
const devkit_1 = require("@nx/devkit");
const styles_1 = require("../../utils/styles");
const artifact_name_and_directory_utils_1 = require("@nx/devkit/src/generators/artifact-name-and-directory-utils");
/*
 * This schematic is basically the React component one, but for Next we need
 * extra dependencies for css, sass, less style options, and make sure
 * it is under `pages` folder.
 */
async function pageGenerator(host, schema) {
    const options = await normalizeOptions(host, schema);
    const componentTask = await (0, react_1.componentGenerator)(host, {
        ...options,
        isNextPage: true,
        export: false,
        classComponent: false,
        routing: false,
        skipTests: !options.withTests,
        skipFormat: true,
    });
    const project = (0, devkit_1.readProjectConfiguration)(host, options.projectName);
    const styledTask = (0, styles_1.addStyleDependencies)(host, {
        style: options.style,
        swc: !host.exists((0, devkit_1.joinPathFragments)(project.root, '.babelrc')),
    });
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(host);
    }
    return (0, devkit_1.runTasksInSerial)(componentTask, styledTask);
}
async function normalizeOptions(host, options) {
    // Get the project name first so we can determine the router directory
    const { project: determinedProjectName } = await (0, artifact_name_and_directory_utils_1.determineArtifactNameAndDirectoryOptions)(host, {
        name: options.name,
        path: options.path,
    });
    const project = (0, devkit_1.readProjectConfiguration)(host, determinedProjectName);
    // app/ is a reserved folder in nextjs so it is safe to check it's existence
    const isAppRouter = host.exists(`${project.root}/app`) ||
        host.exists(`${project.root}/src/app`);
    const { project: projectName, fileName } = await (0, artifact_name_and_directory_utils_1.determineArtifactNameAndDirectoryOptions)(host, {
        name: options.name,
        fileName: isAppRouter ? 'page' : 'index',
        path: options.path,
        fileExtension: 'tsx',
    });
    return {
        ...options,
        fileName,
        projectName,
    };
}
exports.default = pageGenerator;
