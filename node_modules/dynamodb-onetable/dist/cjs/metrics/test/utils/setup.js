"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
    Setup -- setup for the test run
 */
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const client_dynamodb_2 = require("@aws-sdk/client-dynamodb");
const DynamoDbLocal = __importStar(require("dynamo-db-local"));
const wait_port_1 = __importDefault(require("wait-port"));
const PORT = parseInt(process.env.PORT || '4765');
module.exports = async () => {
    /*
        Start the local dynamodb
     */
    let dynamodb = DynamoDbLocal.spawn({ port: PORT });
    console.info('\nSpawn DynamoDB', dynamodb.pid);
    await (0, wait_port_1.default)({ host: '0.0.0.0', port: PORT, timeout: 10000 });
    process.env.DYNAMODB_PID = String(dynamodb.pid);
    process.env.DYNAMODB_PORT = String(PORT);
    /*
        Create the AWS client
     */
    const client = new client_dynamodb_1.DynamoDBClient({
        endpoint: `http://localhost:${PORT}`,
        region: 'local',
        credentials: { accessKeyId: 'test', secretAccessKey: 'test' },
    });
    await createTable(client, 'CustomMetrics');
    globalThis.DynamoDBClient = client;
    // When jest throws anything unhandled, ensure we kill the spawned process
    process.on('unhandledRejection', (error) => {
        let pid = parseInt(process.env.DYNAMODB_PID || '');
        if (pid) {
            process.kill(pid);
        }
    });
};
async function createTable(client, table) {
    let def = {
        AttributeDefinitions: [
            { AttributeName: 'pk', AttributeType: 'S' },
            { AttributeName: 'sk', AttributeType: 'S' },
        ],
        KeySchema: [
            { AttributeName: 'pk', KeyType: 'HASH' },
            { AttributeName: 'sk', KeyType: 'RANGE' },
        ],
        TableName: table,
        BillingMode: 'PAY_PER_REQUEST',
    };
    let command = new client_dynamodb_2.CreateTableCommand(def);
    await client.send(command);
    /*
        Wait for the table to become live
     */
    let deadline = Date.now() + 10 * 1000;
    do {
        let command = new client_dynamodb_2.DescribeTableCommand({ TableName: 'CustomMetrics' });
        let info = await client.send(command);
        if (info.Table.TableStatus == 'ACTIVE') {
            break;
        }
        if (deadline < Date.now()) {
            throw new Error('Table has not become active');
        }
        await delay(1000);
    } while (Date.now() < deadline);
    globalThis.TableName = table;
}
const delay = async (time) => {
    return new Promise(function (resolve, reject) {
        setTimeout(() => resolve(true), time);
    });
};
