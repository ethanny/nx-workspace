"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
    constructor.ts - test constructor options
 */
const init_1 = require("./utils/init");
// jest.setTimeout(7200 * 1000)
test('Constructor with table name', async () => {
    let metrics = new init_1.CustomMetrics({ table: init_1.table });
    expect(metrics).toBeDefined();
    expect(metrics instanceof init_1.CustomMetrics).toBe(true);
    expect(typeof metrics.emit == 'function').toBe(true);
});
test('Constructor with client', async () => {
    let metrics = new init_1.CustomMetrics({ client: init_1.client, table: init_1.table });
    expect(metrics).toBeDefined();
    expect(metrics instanceof init_1.CustomMetrics).toBe(true);
    expect(typeof metrics.emit == 'function').toBe(true);
    let metric = await metrics.emit('test/cons', 'ClientMetric', 10);
    expect(metric).toBeDefined();
});
test('Constructor with custom spans', async () => {
    const Spans = [{ period: 86400, samples: 24 }];
    let metrics = new init_1.CustomMetrics({ client: init_1.client, table: init_1.table, spans: Spans });
    let timestamp = new Date(2000, 0, 1).getTime();
    let metric;
    for (let i = 0; i < 26; i++) {
        metric = await metrics.emit('test/custom', 'CustomMetric', 10, [], { timestamp });
        timestamp += 3600 * 1000;
    }
    expect(metric.spans[0].points.length).toBe(24);
    let r = await metrics.query('test/custom', 'CustomMetric', {}, 86400, 'sum', { timestamp });
    expect(r).toBeDefined();
    expect(r.period).toBe(86400);
    expect(r.points).toBeDefined();
    expect(r.points.length).toBe(24);
    expect(r.points[0].value).toBe(10);
    expect(r.points[0].count).toBe(1);
});
test('Constructor with options', async () => {
    //  Log true
    let metrics = new init_1.CustomMetrics({ table: init_1.table });
    expect(metrics).toBeDefined();
    //  Verbose log
    metrics = new init_1.CustomMetrics({ table: init_1.table, log: 'verbose' });
    expect(metrics).toBeDefined();
    //  Custom log
    metrics = new init_1.CustomMetrics({ table: init_1.table, log: {
            info: (message, context) => null,
            error: (message, context) => null,
        } });
    expect(metrics).toBeDefined();
    //  Verbose log
    metrics = new init_1.CustomMetrics({ table: init_1.table, log: 'verbose' });
    expect(metrics).toBeDefined();
    //  DynamoDB prefix
    metrics = new init_1.CustomMetrics({ table: init_1.table, prefix: 'met' });
    expect(metrics).toBeDefined();
    //  TTL
    metrics = new init_1.CustomMetrics({ table: init_1.table, ttl: 86400 });
    expect(metrics).toBeDefined();
    //  Consistent
    metrics = new init_1.CustomMetrics({ table: init_1.table, consistent: true });
    expect(metrics).toBeDefined();
    expect(() => {
        //  empty spans
        new init_1.CustomMetrics({ table: init_1.table, spans: [] });
    }).toThrow();
    expect(() => {
        //  Invalid pResolution
        new init_1.CustomMetrics({ table: init_1.table, pResolution: -1 });
    }).toThrow();
    expect(() => {
        //  Invalid buffer
        new init_1.CustomMetrics({ table: init_1.table, buffer: true });
    }).toThrow();
    expect(() => {
        //  Bad TTL
        new init_1.CustomMetrics({ table: init_1.table, ttl: true });
    }).toThrow();
    expect(() => {
        //  Bad consistent
        new init_1.CustomMetrics({ table: init_1.table, consistent: 42 });
    }).toThrow();
    expect(() => {
        //  Bad Source
        new init_1.CustomMetrics({ table: init_1.table, source: true });
    }).toThrow();
    expect(() => {
        //  Missing database
        new init_1.CustomMetrics({});
    }).toThrow();
    expect(() => {
        //  Missing table name
        new init_1.CustomMetrics({ client: init_1.client });
    }).toThrow();
    expect(() => {
        //  Missing options
        new init_1.CustomMetrics();
    }).toThrow();
});
test('Constructor coverage', async () => {
    new init_1.CustomMetrics({ table: init_1.table, buffer: { sum: 100 } });
    new init_1.CustomMetrics({ table: init_1.table, source: 'internal' });
});
