"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
    pvalues.ts - Test emit and query with P-values
 */
const init_1 = require("./utils/init");
// jest.setTimeout(7200 * 1000)
test('Test emit with P-Values', async () => {
    let metrics = new init_1.CustomMetrics({ client: init_1.client, table: init_1.table, pResolution: 10 });
    for (let i = 0; i < 10; i++) {
        await metrics.emit('test/pvalues', 'PMetric', i);
    }
    //  p90
    let r = await metrics.query('test/pvalues', 'PMetric', {}, 300, 'p90');
    expect(r.points.length).toBe(r.samples);
    expect(r.points[9].value).toBe(9);
    expect(r.points[9].count).toBe(10);
    //  p50
    r = await metrics.query('test/pvalues', 'PMetric', {}, 300, 'p50');
    expect(r.points.length).toBe(r.samples);
    expect(r.points[9].value).toBe(6);
    expect(r.points[9].count).toBe(10);
    //  Accumulate
    r = await metrics.query('test/pvalues', 'PMetric', {}, 300, 'p50', { accumulate: true });
    expect(r.points.length).toBe(1);
    expect(r.points[0].value).toBe(6);
    expect(r.points[0].count).toBe(10);
    //  Higher span
    r = await metrics.query('test/pvalues', 'PMetric', {}, 86400, 'p90');
    expect(r.points.length).toBe(r.samples);
    expect(r.points[11].value).toBe(9);
    expect(r.points[11].count).toBe(10);
});
